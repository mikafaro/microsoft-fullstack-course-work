@using EventEaseApp.Models

@inject EventEaseApp.Services.UserService UserService;
@inject EventEaseApp.Services.SessionState SessionState;

<h3>Register</h3>

<EditForm OnValidSubmit="HandleValidSubmit" Model="@registrationModel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="registrationModel.Username" />
        <ValidationMessage For="@(() => registrationModel.Username)" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="registrationModel.Email" />
        <ValidationMessage For="@(() => registrationModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registrationModel.Password" />
        <ValidationMessage For="@(() => registrationModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private UserDetails registrationModel = new UserDetails();

    private async Task HandleValidSubmit()
    {
        try
        {
            await UserService.RegisterUserAsync(registrationModel);
            SessionState.SetUser(registrationModel.Username); // Authenticate user in session state
            registrationModel = new UserDetails(); // Reset the form after successful registration

        }
        catch (Exception ex)
        {
            // Handle registration error (e.g., show an error message)
            Console.WriteLine($"Registration failed: {ex.Message}");
        }
    }
}