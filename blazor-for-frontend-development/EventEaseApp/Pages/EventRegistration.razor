@page "/eventregistration"

@inject EventEaseApp.Services.EventService EventService;
@inject NavigationManager NavigationManager;

@using EventEaseApp.Models;

<h3>Register a New Event</h3>

<EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="eventName" class="form-label">Event Name</label>
        <InputText id="eventName" class="form-control" @bind-Value="eventModel.Name" />
    </div>
    <div class="mb-3">
        <label for="eventDate" class="form-label">Event Date</label>
        <InputDate id="eventDate" class="form-control" @bind-Value="eventModel.Date"  />
    </div>
    <div class="mb-3">
        <label for="eventLocation" class="form-label">Location</label>
        <InputText id="eventLocation" class="form-control" @bind-Value="eventModel.Location" />
    </div>
    <button type="submit" class="btn btn-primary">Register Event</button>
</EditForm>

@code {
    private Event eventModel;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        eventModel = new Event { Date = DateTime.Today };
        editContext = new EditContext(eventModel);
    }

    private async Task HandleValidSubmit()
    {
        await EventService.CreateEventAsync(eventModel);
        NavigationManager.NavigateTo("/eventlist");
        // If you want to stay on the page and allow another entry, use:
        // ResetForm();
        // StateHasChanged();
    }
}